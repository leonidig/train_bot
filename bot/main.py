import asyncio
import logging
import sys
from os import getenv, listdir, path
import types
from dotenv import load_dotenv


from aiogram import Bot, Dispatcher, html, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.callback_data import CallbackData,  CallbackQuery
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReactionTypeEmoji, FSInputFile, InputMediaPhoto, InputMediaVideo


from keyboards import reply_keyboards, inline_keyboards
from commands import commands_router
from utils.states import Algebra, Geography, Translate


from translators import translate_text



load_dotenv()
print(getenv("TOKEN"))
TOKEN = getenv("TOKEN")




router = Router()
dp = Dispatcher()
dp.include_router(commands_router)

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {hbold(message.from_user.full_name)}!", reply_markup=reply_keyboards.subjects_kb)



@dp.message(F.text == "–ê–ª–≥–µ–±—Ä–∞")
async def st_alg_quiz(message: Message, state: FSMContext):
    await state.set_state(Algebra.q1)
    await message.reply("–¶–µ —Ä–µ–∂–∏–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ –ê–ª–≥–µ–±—Ä–∏")
    await message.reply("–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ1\n–ß–æ–º—É –¥–æ—Ä—ñ–≤–Ω—é—î ‚àö144 ", reply_markup=reply_keyboards.algebra1)




@dp.message(Algebra.q1)
async def alg_q1(message: Message, state: FSMContext):
    result = '12'
    if message.text == result:
        await message.react([ReactionTypeEmoji(emoji="üëç")])
        await message.reply('–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòé', reply_markup=reply_keyboards.continue_kb1)
    else:
        await message.react([ReactionTypeEmoji(emoji="üëé")])
        await message.reply("–ü–æ–º–∏–ª–∫–∞ üö®\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 12", reply_markup=reply_keyboards.continue_kb1)
    await state.clear()



@dp.message(F.text == "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
async def algebra_q2(message: Message, state: FSMContext):
    await state.set_state(Algebra.q2)
    await message.reply("–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ2\n5 - 2 ‚Ä¢ 7 = ", reply_markup=reply_keyboards.algebra2)



@dp.message(Algebra.q2)
async def alg_q2(message: Message, state: FSMContext):

    result = '-3'
    if message.text == result:
        await message.react([ReactionTypeEmoji(emoji="üëç")])
        await message.reply('+1 –±–∞–ª üòÆ‚Äçüí®', reply_markup=reply_keyboards.continue_kb2)

    else:
        await message.react([ReactionTypeEmoji(emoji="üëé")])
        await message.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üö®\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - {result}", reply_markup=reply_keyboards.continue_kb2)



    await state.clear()




@dp.message(F.text == "–î–∞–ª—ñ")
async def algebra_q3(message: Message, state: FSMContext):
    await state.set_state(Algebra.q3)
    await message.reply("–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ3\n8¬≤ : 2 = ", reply_markup=reply_keyboards.algebra3)




@dp.message(Algebra.q3)
async def alg_q3(message: Message, state: FSMContext):

    result = '32'
    if message.text == result:
        await message.react([ReactionTypeEmoji(emoji="‚ö°Ô∏è")])
        await message.reply('–ü—Ä–∞–≤–∏–ª—å–Ω–æ üëçüèª', reply_markup=reply_keyboards.continue_kb3)

    else:
        await message.react([ReactionTypeEmoji(emoji="ü§¨")])
        await message.reply(f"–¢–∏ –ø–æ–º–∏–ª–∏–≤—Å—è üòû\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - {result}", reply_markup=reply_keyboards.continue_kb3)



    await state.clear()


@dp.message(F.text == "–ü–æ—ó—Ö–∞–ª–∏")
async def algebra_q4(message: Message, state: FSMContext):
    await state.set_state(Algebra.q4)
    await message.reply("–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ4\n73% –≤—ñ–¥ 100 —Ü–µ", reply_markup=reply_keyboards.algebra4)


@dp.message(Algebra.q4)
async def alg_q2(message: Message, state: FSMContext):
    result = '73'
    if message.text == result:
        await message.react([ReactionTypeEmoji(emoji="‚ö°Ô∏è")])
        await message.reply('–í—ñ—Ä–Ω–æ üëçüèª', reply_markup=reply_keyboards.continue_kb4)
        
    else:
        await message.react([ReactionTypeEmoji(emoji="ü§¨")])
        await message.reply(f"–¢–∏ –ø–æ–º–∏–ª–∏–≤—Å—è\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - {result}", reply_markup=reply_keyboards.continue_kb4)

    await state.clear()


@dp.message(F.text == "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")
async def end_q(message: Message):
    await message.reply("–í—ñ—Ç–∞—é –≤–∏ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –∞–ª–≥–µ–±—Ä–∏!", reply_markup=inline_keyboards.go_menu)





@dp.message(F.text == "–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è")
async def p1(messge: Message, state: FSMContext):
    photo1 = FSInputFile("bot/images/newyork.jpg")
    await state.set_state(Geography.im1)
    await messge.answer_photo(photo1, "–í–≥–∞–¥–∞–π —è–∫–∏–π —Ü–µ –≥–æ—Ä–æ–¥\n–ü—ñ–¥–∫–∞–∑–∫–∞ - —Ü–µ –º—ñ—Å—Ç–æ –Ω–∞–∑–∏–≤–∞—é—Ç '–ú—ñ—Å—Ç–æ, —è–∫–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑–∞—Å–∏–Ω–∞—î'")

@dp.message(Geography.im1)
async def enter_city1(message: Message, state: FSMContext):
    
    result = ["–Ω—å—é –π–æ—Ä–∫", "–Ω—é –π–æ—Ä–∫", "–Ω—å—é-–π–æ—Ä–∫"]
    if message.text.lower() in result:
        await message.react([ReactionTypeEmoji(emoji="‚ö°Ô∏è")])
        await message.reply('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=reply_keyboards.cont_g1)
    else:
        await message.react([ReactionTypeEmoji(emoji="üñï")])
        await message.reply("–ü–æ–º–∏–ª–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - –ù—å—é –ô–æ—Ä–∫", reply_markup=reply_keyboards.cont_g1)
    await state.clear()

@dp.message(F.text == "–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è")
async def p2(message: Message, state: FSMContext):
    photo2 = FSInputFile('bot/images/berlin.jpg')
    await state.set_state(Geography.im2)
    await message.answer_photo(photo2,"–í–≥–∞–¥–∞–π —è–∫–∏–π —Ü–µ –≥–æ—Ä–æ–¥\n–ü—ñ–¥–∫–∞–∑–∫–∞ - '–¶–µ —Å—Ç–æ–ª–∏—Ü—è –Ω–∞–π–±—ñ–ª—å—à –Ω–∞—Å–µ–ª–µ–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏ –Ñ–≤—Ä–æ–ø–∏'")



@dp.message(Geography.im2)
async def enter_city2(message: Message, state: FSMContext):
    
    result = "–±–µ—Ä–ª—ñ–Ω"
    if message.text.lower() == result:
        await message.react([ReactionTypeEmoji(emoji="‚ö°Ô∏è")])
        await message.reply('–¢–∏ –∫—Ä—É—Ç!', reply_markup=reply_keyboards.cont_g2)
    else:
        await message.react([ReactionTypeEmoji(emoji="üñï")])
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - {result}", reply_markup=reply_keyboards.cont_g2)
    await state.clear()


@dp.message(F.text == "->")
async def p2(message: Message, state: FSMContext):
    photo3 = FSInputFile('bot/images/italy.jpg')
    await state.set_state(Geography.im3)
    await message.answer_photo(photo3,"–í–≥–∞–¥–∞–π –∫—Ä–∞—ó–Ω—É\n–°—Ö–æ–∂–∞ –Ω–∞ —Å–∞–ø–æ–≥")


@dp.message(Geography.im3)
async def enter_country(message: Message, state: FSMContext):
    
    result = "—ñ—Ç–∞–ª—ñ—è"
    if message.text.lower() == result:
        await message.react([ReactionTypeEmoji(emoji="üíò")])
        await message.reply('–¢–∏ –∫—Ä—É—Ç!', reply_markup=reply_keyboards.cont_g3)
    else:
        await message.react([ReactionTypeEmoji(emoji="üí©")])
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - {result}", reply_markup=reply_keyboards.cont_g3)
    await state.clear()



@dp.message(F.text == "–î–∞–ª—ñ!!!")
async def p3(message: Message, state: FSMContext):
    await state.set_state(Geography.im4)
    await message.answer('–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ4\n–°—Ç–æ–ª–∏—Ü—è –Ü—Å–ø–∞–Ω—ñ—ó')


@dp.message(Geography.im4)
async def enter_country(message: Message, state: FSMContext):
    
    result = "–º–∞–¥—Ä–∏–¥"
    if message.text.lower() == result:
        await message.react([ReactionTypeEmoji(emoji="üíò")])
        await message.reply('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!', reply_markup=reply_keyboards.cont_g4)
    else:
        await message.react([ReactionTypeEmoji(emoji="üí©")])
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - {result}", reply_markup=reply_keyboards.cont_g4)
    await state.clear()


@dp.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç")
async def end_q1(message: Message):
    await message.reply("–í—ñ—Ç–∞—é –≤–∏ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—ó!", reply_markup=inline_keyboards.go_menu)





@dp.message(F.text == "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á")
async def _translator(message: Message, state: FSMContext):
    await state.set_state(Translate.msg)
    await message.reply("–ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏, —Ñ–æ—Ä–º–∞—Ç üá∫üá¶ -> üá¨üáß")

@dp.message(Translate.msg)
async def _translate(message: Message, state: FSMContext):
    if message.text == "‚ùå":
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥: ", reply_markup=reply_keyboards.subjects_kb)
        await state.finish()


    elif message.text == "üîÑÔ∏è":
        await state.set_state(Translate.msg)
        await message.reply("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç: ")
    else:
        if message.text.startswith("–ü–µ—Ä–µ–∫–ª–∞–¥ : "):
            await message.reply(message.text, reply_markup=reply_keyboards.translator_kb)
        else:
            translated_text = translate_text(message.text, translator="google", from_language="uk", to_language="en")
            await message.reply("–ü–µ—Ä–µ–∫–ª–∞–¥ : " + translated_text, reply_markup=reply_keyboards.translator_kb)


@dp.callback_query(F.data=="go_home")
async def back(callback_query: CallbackQuery):
    await callback_query.message.reply('–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚úÖ', reply_markup= reply_keyboards.subjects_kb)



@dp.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç –†–æ–∑—Ä–æ–±–Ω–∏–∫–∞")
async def send_contact(message: Message):
    await message.answer_contact(phone_number="+380980195811", first_name="–õ—å–æ–Ω—è")


@dp.message(F.text == "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —É—Ä–æ–∫–∏")
async def links(message: Message):
    await message.reply(f'''
https://us05web.zoom.us/j/8452855547?pwd=b2xpZkNRM1hBZXFLdGRjbjVTbGNvdz09 - {hbold('–§—ñ–∑–∏–∫–∞ / –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞')}\n
https://us05web.zoom.us/j/6536950820?pwd=ZGUwL1VZMHpWNnZTVDNQVWpTZEFwUT09- {hbold('–•—ñ–º—ñ—è')}\n
https://us05web.zoom.us/j/82300579633?pwd=kmx7RD3MGqhQqXapWO78nXpiwG8cWh.1- {hbold('–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞')}\n
https://us05web.zoom.us/j/7500911710?pwd=UDhDcjlNclJpUjFZVW5aN3cxa1VvZz09 - {hbold('–§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞')}\n
https://us04web.zoom.us/j/5879157046?pwd=74WQImIHBsxUw6i86J3Ewq5ia9SyQZ.1 - {hbold('–ó–∞—Ä—É–±—ñ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞')}\n
https://us05web.zoom.us/j/7545658956?pwd=OE85SkFEZUJ5YzhXeVc3TVRYMXF5QT09 - {hbold('–¢—Ä—É–¥–∏')}\n
https://us04web.zoom.us/j/79501510803?pwd=VkhSUW50a01RdEo0QVlVZ0VIbzFZUT09 - {hbold('–ù—ñ–º–µ—Ü—å–∫–∞')}\n
https://us05web.zoom.us/j/7265907702?pwd=VkU3K05STTMzRk83YVRVOUg0c1VUUT09 - {hbold('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')}\n
https://zoom.us/j/94270252449?pwd=ZFhIRnBRUnoxbDJoTWROdU9tRWJ2UT09 - {hbold('–ë—ñ–æ–ª–æ–≥—ñ—è')}\n
https://us04web.zoom.us/j/2127143372?pwd=LyCbyEfuJyYxNZCsricuHsYkyvUt1Q.1 - {hbold('–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è')}\n
''')



async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())